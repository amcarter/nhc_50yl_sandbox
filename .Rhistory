data {
int <lower=0> N; //number of data points
vector [N] ar;//conductivity corrected Ar data
vector [N] station;// station meters
}
parameters {
real<lower=0, upper=0.2> sigma; // error, lowered to 0.2 from 0.5
real k; // decline
real Ar0; // y intercept
}
model {
//priors.
k ~ normal(0, 5);
// Ar0 ~ normal(site pre-samp mean, site pre-samp mean sd);  //Ao prior with mean = 1 and sd= the mean of the sds for all of the upper sites.
//likelihood
(ar/ar[1]) ~ normal( Ar0 * exp(-k*station*0.01) , sigma);
}
"
,fill=TRUE)
sink()
metfit <- stan(file = "argonmodel.stan", data = standata,
iter = 3000, chains = 1)
print(metfit, digits=3)
traceplot(metfit)
print(metfit, digits=3)
launch_shinystan(metfit)
plot(arfinal$Station, log(arfinal$arcorr/arfinal$arcorr[1] ), xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
plot(arfinal$Station, log(arfinal$arcorr/arfinal$arcorr[1] ), xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
lines(arfinal$Station, .98*exp(-4.3*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, .96*exp(-6.28*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, .99*exp(-6.94*0.01*arfinal$Station)  ) #97.5%
sink()
sink()
sink()
####
sink("argonmodel.stan")
cat("
data {
int <lower=0> N; //number of data points
vector [N] ar;//conductivity corrected Ar data
vector [N] station;// station meters
}
parameters {
real<lower=0, upper=0.2> sigma; // error, lowered to 0.2 from 0.5
real k; // decline
real Ar0; // y intercept
}
model {
//priors.
k ~ normal(0, 5);
// Ar0 ~ normal(site pre-samp mean, site pre-samp mean sd);  //Ao prior with mean = 1 and sd= the mean of the sds for all of the upper sites.
//likelihood
(ar/ar[1]) ~ normal( Ar0 * exp(-k*station*0.01) , sigma);
}
"
,fill=TRUE)
sink()
metfit <- stan(file = "argonmodel.stan", data = standata,
iter = 3000, chains = 1)
print(metfit, digits=3)
traceplot(metfit)
plot(arfinal$Station, log(arfinal$arcorr/arfinal$arcorr[1] ),
xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
lines(arfinal$Station, .98*exp(-4.3*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, .96*exp(-6.28*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, .99*exp(-6.94*0.01*arfinal$Station)  ) #97.5%
print(metfit, digits=3)
metfit$k
class(metfit)
metfit[[k]]
lines(arfinal$Station, .946*exp(-.232*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, 1.025*exp(-.275*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, 1.101*exp(-.327*0.01*arfinal$Station)  ) #97.5%
plot(arfinal$Station, (arfinal$arcorr/arfinal$arcorr[1] ),
xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
lines(arfinal$Station, .946*exp(-.232*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, 1.025*exp(-.275*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, 1.101*exp(-.327*0.01*arfinal$Station)  ) #97.5%
metfit
metfit$sigma
metfit@stanmodel
metfit@model_pars
metfit@par_dims
metfit@mode
metfit@sim
summary(metfit)
metfit$summary
summary(metfit)$summary
summary(metfit)$summary[1,]
coeff <- summary(metfit)$summary
plot(arfinal$Station, (arfinal$arcorr/arfinal$arcorr[1] ),
xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
lines(arfinal$Station, coeff[3,4]*exp(-coeff[2,4]*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, coeff[3,6]*exp(-coeff[2,6]*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, coeff[3,8]*exp(-coeff[2,8]*0.01*arfinal$Station)  ) #97.5%
out <- as.data.frame(site = "NHC", date = "2017-06-27",
k_md = coef[2,6], k_md_sd = coef[2,3])
out <- as.data.frame(site = "NHC", date = "2017-06-27", k_md = coef[2,6], k_md_sd = coef[2,3])
out <- data.frame(site = "NHC", date = "2017-06-27", k_md = coef[2,6], k_md_sd = coef[2,3])
out <- data.frame(site = "NHC", date = "2017-06-27", k_md = coeff[2,6], k_md_sd = coeff[2,3])
out
out <- data.frame(site = "NHC", date = as.Date("2017-06-27"),
k_md = coeff[2,6], k_md_sd = coeff[2,3])
kvals <- out
write_csv(kvals, "estimated_k_values.csv")
# Call and name the MIMS data.It's and excel file to preserve decimal places in MIMS current values.
all.ardata<-read.csv("processed/Mud_5-17-17.csv")
#eyeballing the concentration data. Do not use concentration values for final analysis!
ggplot(all.ardata, aes(x=Station, y=arconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
ggplot(all.ardata, aes(x=Station, y=nconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
Ar_model<-function(all.ardata){  # this model standardizes the data, averages by station and sample
#Make a dataframe for data used in analysis
ardata<-data.frame(site=all.ardata$Site, sample=all.ardata$Plateau, Station = all.ardata$Station, ArN2 = 1/all.ardata$N2.Ar, arconc=all.ardata$arconc, nconc=all.ardata$nconc, Temp=all.ardata$Temp, Pressure=all.ardata$Pressure)
#ArN2 at saturation based on gas_functions.R code
ArN2sat<-arsat(ardata$Temp, ardata$Pressure)/nsat(ardata$Temp, ardata$Pressure)
ardata$ArN2sat<-ArN2sat
ardata$arsatv<-arsat(ardata$Temp, ardata$Pressure)
ardata$nsatv<-nsat(ardata$Temp, ardata$Pressure)
#Stadardize all the data so that the first site downstream is adjusted to be 0 meters.
ardata$Station <- ardata$Station-min(ardata$Station)
# #eyeball the changes to ArN2 data so far
ggplot(ardata, aes(x=Station, y=ArN2, colour=sample)) +
geom_point(size=3) +
geom_point(aes(x=Station, y=ArN2sat, colour=sample)) + #includes Ar:N2 at saturation
theme_bw()
#average by station and by sample
ardata_mean<-ddply(ardata, .(ardata$Station, ardata$sample), function(ardata) mean(ardata$ArN2))
colnames(ardata_mean)<-c("Station", "sample", "ArN2")
arpost<-ardata[ardata$sample == 'post', ] #subset plateau out of the ardata - which contains data for 3 replicates, from these 3 replicates we will use the mean background from each station to correct - which we will do in arfinal (next line of code)
ar_mean<-ddply(ardata, .(ardata$Station, ardata$sample), function(ardata) mean(ardata$arconc))
colnames(ar_mean)<-c("Station", "sample", "arconc")
arbkg<-merge(ardata_mean, ar_mean, by=c("Station", "sample"))
arbackground<-arbkg[arbkg$sample == 'pre', ] #only want the averaged background values to be subtracted from each of the 3 replicate plateau values
arfinal<-merge(arbackground, arpost, by=c("Station"))
colnames(arfinal)<-c("Station", "note_b", 'ArN2_bg', 'arconc_bg', 'site', 'note_p', 'ArN2_plat',
'arconc_plat', 'nconc', 'Temp', 'Pressure', 'ArN2sat', 'arsatv', 'nsatv')
arfinal$arcorr<-(arfinal$ArN2_plat-arfinal$ArN2_bg)
arfinal
}
arfinal <- Ar_model(all.ardata)
plot(arfinal$Station, arfinal$arcorr, pch=20, cex=1.5, ylab='Background corrected ArN2',
xlab="stream m")
####
sink("argonmodel.stan")
cat("
data {
int <lower=0> N; //number of data points
vector [N] ar;//conductivity corrected Ar data
vector [N] station;// station meters
}
parameters {
real<lower=0, upper=0.2> sigma; // error, lowered to 0.2 from 0.5
real k; // decline
real Ar0; // y intercept
}
model {
//priors.
k ~ normal(0, 5);
// Ar0 ~ normal(site pre-samp mean, site pre-samp mean sd);  //Ao prior with mean = 1 and sd= the mean of the sds for all of the upper sites.
//likelihood
(ar/ar[1]) ~ normal( Ar0 * exp(-k*station*0.01) , sigma);
}
"
,fill=TRUE)
sink()
plot(arfinal$Station, arfinal$arcorr )
plot(arfinal$Station, arfinal$arcorr , log='y') #It is not uncommon to have negative values that you can't plot in log space
standata=list("ar"= arfinal$arcorr, "station"=arfinal$Station, "N"=length(arfinal$Station) ) #indicates the data to be fed into the Stan model (see metfit below)
summary(lm(log(arfinal$arcorr)~ arfinal$Station ))#It is not uncommon to have negative values that you can't plot in log space
metfit <- stan(file = "argonmodel.stan", data = standata,
iter = 3000, chains = 1)
print(metfit, digits=3)
traceplot(metfit)
# launch_shinystan(metfit)
coeff <- summary(metfit)$summary
plot(arfinal$Station, (arfinal$arcorr/arfinal$arcorr[1] ),
xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
lines(arfinal$Station, coeff[3,4]*exp(-coeff[2,4]*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, coeff[3,6]*exp(-coeff[2,6]*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, coeff[3,8]*exp(-coeff[2,8]*0.01*arfinal$Station)  ) #97.5%
out <- data.frame(site = "Mud", date = as.Date("2017-05-17"),
k_md = coeff[2,6], k_md_sd = coeff[2,3])
kvals <- read_csv("estimated_k_values.csv")
kvals
kvals <- bind_rows(kvals, out)
kvals
write_csv(kvals, "estimated_k_values.csv")
# Call and name the MIMS data.It's and excel file to preserve decimal places in MIMS current values.
all.ardata<-read.csv("processed/Stony_5-26-17.csv")
#eyeballing the concentration data. Do not use concentration values for final analysis!
ggplot(all.ardata, aes(x=Station, y=arconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
ggplot(all.ardata, aes(x=Station, y=nconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
# Call and name the MIMS data.It's and excel file to preserve decimal places in MIMS current values.
all.ardata<-read.csv("processed/UEno_7-27-17.csv")
#eyeballing the concentration data. Do not use concentration values for final analysis!
ggplot(all.ardata, aes(x=Station, y=arconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
ggplot(all.ardata, aes(x=Station, y=nconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
Ar_model<-function(all.ardata){  # this model standardizes the data, averages by station and sample
#Make a dataframe for data used in analysis
ardata<-data.frame(site=all.ardata$Site, sample=all.ardata$Plateau, Station = all.ardata$Station, ArN2 = 1/all.ardata$N2.Ar, arconc=all.ardata$arconc, nconc=all.ardata$nconc, Temp=all.ardata$Temp, Pressure=all.ardata$Pressure)
#ArN2 at saturation based on gas_functions.R code
ArN2sat<-arsat(ardata$Temp, ardata$Pressure)/nsat(ardata$Temp, ardata$Pressure)
ardata$ArN2sat<-ArN2sat
ardata$arsatv<-arsat(ardata$Temp, ardata$Pressure)
ardata$nsatv<-nsat(ardata$Temp, ardata$Pressure)
#Stadardize all the data so that the first site downstream is adjusted to be 0 meters.
ardata$Station <- ardata$Station-min(ardata$Station)
# #eyeball the changes to ArN2 data so far
ggplot(ardata, aes(x=Station, y=ArN2, colour=sample)) +
geom_point(size=3) +
geom_point(aes(x=Station, y=ArN2sat, colour=sample)) + #includes Ar:N2 at saturation
theme_bw()
#average by station and by sample
ardata_mean<-ddply(ardata, .(ardata$Station, ardata$sample), function(ardata) mean(ardata$ArN2))
colnames(ardata_mean)<-c("Station", "sample", "ArN2")
arpost<-ardata[ardata$sample == 'post', ] #subset plateau out of the ardata - which contains data for 3 replicates, from these 3 replicates we will use the mean background from each station to correct - which we will do in arfinal (next line of code)
ar_mean<-ddply(ardata, .(ardata$Station, ardata$sample), function(ardata) mean(ardata$arconc))
colnames(ar_mean)<-c("Station", "sample", "arconc")
arbkg<-merge(ardata_mean, ar_mean, by=c("Station", "sample"))
arbackground<-arbkg[arbkg$sample == 'pre', ] #only want the averaged background values to be subtracted from each of the 3 replicate plateau values
arfinal<-merge(arbackground, arpost, by=c("Station"))
colnames(arfinal)<-c("Station", "note_b", 'ArN2_bg', 'arconc_bg', 'site', 'note_p', 'ArN2_plat',
'arconc_plat', 'nconc', 'Temp', 'Pressure', 'ArN2sat', 'arsatv', 'nsatv')
arfinal$arcorr<-(arfinal$ArN2_plat-arfinal$ArN2_bg)
arfinal
}
arfinal <- Ar_model(all.ardata)
plot(arfinal$Station, arfinal$arcorr, pch=20, cex=1.5, ylab='Background corrected ArN2',
xlab="stream m")
plot(arfinal$Station, arfinal$arcorr )
plot(arfinal$Station, arfinal$arcorr , log='y') #It is not uncommon to have negative values that you can't plot in log space
standata=list("ar"= arfinal$arcorr, "station"=arfinal$Station, "N"=length(arfinal$Station) ) #indicates the data to be fed into the Stan model (see metfit below)
summary(lm(log(arfinal$arcorr)~ arfinal$Station ))#It is not uncommon to have negative values that you can't plot in log space
metfit <- stan(file = "argonmodel.stan", data = standata,
iter = 3000, chains = 1)
# Call and name the MIMS data.It's and excel file to preserve decimal places in MIMS current values.
all.ardata<-read.csv("processed/UNHC_7-11-17.csv")
#eyeballing the concentration data. Do not use concentration values for final analysis!
ggplot(all.ardata, aes(x=Station, y=arconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
ggplot(all.ardata, aes(x=Station, y=nconc, colour=Plateau)) +
geom_point(size=3) +
theme_bw()
Ar_model<-function(all.ardata){  # this model standardizes the data, averages by station and sample
#Make a dataframe for data used in analysis
ardata<-data.frame(site=all.ardata$Site, sample=all.ardata$Plateau, Station = all.ardata$Station, ArN2 = 1/all.ardata$N2.Ar, arconc=all.ardata$arconc, nconc=all.ardata$nconc, Temp=all.ardata$Temp, Pressure=all.ardata$Pressure)
#ArN2 at saturation based on gas_functions.R code
ArN2sat<-arsat(ardata$Temp, ardata$Pressure)/nsat(ardata$Temp, ardata$Pressure)
ardata$ArN2sat<-ArN2sat
ardata$arsatv<-arsat(ardata$Temp, ardata$Pressure)
ardata$nsatv<-nsat(ardata$Temp, ardata$Pressure)
#Stadardize all the data so that the first site downstream is adjusted to be 0 meters.
ardata$Station <- ardata$Station-min(ardata$Station)
# #eyeball the changes to ArN2 data so far
ggplot(ardata, aes(x=Station, y=ArN2, colour=sample)) +
geom_point(size=3) +
geom_point(aes(x=Station, y=ArN2sat, colour=sample)) + #includes Ar:N2 at saturation
theme_bw()
#average by station and by sample
ardata_mean<-ddply(ardata, .(ardata$Station, ardata$sample), function(ardata) mean(ardata$ArN2))
colnames(ardata_mean)<-c("Station", "sample", "ArN2")
arpost<-ardata[ardata$sample == 'post', ] #subset plateau out of the ardata - which contains data for 3 replicates, from these 3 replicates we will use the mean background from each station to correct - which we will do in arfinal (next line of code)
ar_mean<-ddply(ardata, .(ardata$Station, ardata$sample), function(ardata) mean(ardata$arconc))
colnames(ar_mean)<-c("Station", "sample", "arconc")
arbkg<-merge(ardata_mean, ar_mean, by=c("Station", "sample"))
arbackground<-arbkg[arbkg$sample == 'pre', ] #only want the averaged background values to be subtracted from each of the 3 replicate plateau values
arfinal<-merge(arbackground, arpost, by=c("Station"))
colnames(arfinal)<-c("Station", "note_b", 'ArN2_bg', 'arconc_bg', 'site', 'note_p', 'ArN2_plat',
'arconc_plat', 'nconc', 'Temp', 'Pressure', 'ArN2sat', 'arsatv', 'nsatv')
arfinal$arcorr<-(arfinal$ArN2_plat-arfinal$ArN2_bg)
arfinal
}
arfinal <- Ar_model(all.ardata)
plot(arfinal$Station, arfinal$arcorr, pch=20, cex=1.5, ylab='Background corrected ArN2',
xlab="stream m")
arfinal %>%
filter(Station > 50) %>%
mutate(Station = Station - min(Station, na.rm = T))
tt <- arfinal %>%
filter(Station > 50) %>%
mutate(Station = Station - min(Station, na.rm = T))
plot(tt$Station, tt$arcorr, pch=20, cex=1.5, ylab='Background corrected ArN2',
xlab="stream m")
arfinal <- arfinal %>%
filter(Station > 50) %>%
mutate(Station = Station - min(Station, na.rm = T))
plot(arfinal$Station, arfinal$arcorr )
plot(arfinal$Station, arfinal$arcorr , log='y') #It is not uncommon to have negative values that you can't plot in log space
standata=list("ar"= arfinal$arcorr, "station"=arfinal$Station, "N"=length(arfinal$Station) ) #indicates the data to be fed into the Stan model (see metfit below)
summary(lm(log(arfinal$arcorr)~ arfinal$Station ))#It is not uncommon to have negative values that you can't plot in log space
metfit <- stan(file = "argonmodel.stan", data = standata,
iter = 3000, chains = 1)
print(metfit, digits=3)
traceplot(metfit)
# launch_shinystan(metfit)
coeff <- summary(metfit)$summary
plot(arfinal$Station, (arfinal$arcorr/arfinal$arcorr[1] ),
xlab = "Distance downstream (m)", ylab = "standardized Ar:N ratio", pch=20, cex=1.3)
lines(arfinal$Station, coeff[3,4]*exp(-coeff[2,4]*0.01*arfinal$Station)  ) #using background corrected values
lines(arfinal$Station, coeff[3,6]*exp(-coeff[2,6]*0.01*arfinal$Station)  ) #2.5%
lines(arfinal$Station, coeff[3,8]*exp(-coeff[2,8]*0.01*arfinal$Station)  ) #97.5%
out <- data.frame(site = "UNHC", date = as.Date("2017-07-11"),
k_md = coeff[2,6], k_md_sd = coeff[2,3])
kvals <- read_csv("estimated_k_values.csv")
kvals <- bind_rows(kvals, out)
write_csv(kvals, "estimated_k_values.csv")
# k = 2.3 * k2 * DO.sat / 24hr
library(tidyverse)
library(zoo)
library(streamMetabolizer)
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code")
#fix this version so that it is the one that has discharge
# you can find how to do that in analyze_hall_k_values
##Convert KO2 to K600
K600fromO2<-function(temp, KO2) {
((600/(1800.6-(120.1*temp)+(3.7818*temp^2)-(0.047608*temp^3)))^-0.5)*KO2
}
hall_k <- read_csv("../data/hall/hall_tableA2_k_morphology_extended.csv")# %>%
hall_k <- read_csv("../data/hall/hall_k_compiled.csv") %>%
filter(method == "empirical") %>%
mutate(K600 = K600fromO2(20, KO2.perday))
ar_k <- read_csv("data/estimated_k_values.csv")
hall_k
ar_k
# d = depth (m), v = velocity (m/s), DO.sat = DO at saturation (mg/L), t = temp C
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data")
#cbp <- read_csv("metabolism/processed/CBP_lvl.csv")
nhc <- read_csv("metabolism/processed/NHC.csv")
nhc
nhc
#cbp <- read_csv("metabolism/processed/CBP_lvl.csv")
nhc <- read_csv("metabolism/processed/NHC.csv") %>%
mutate(DateTime_EST = force_tz(DateTime_EST, tz = "EST"),
date = as.Date(DateTime_EST)) %>%
filter(date = as.Date("2017-06-27")) %>%
select(DO.obs, temp.water, level_m, depth, discharge)
library(lubridate)
#cbp <- read_csv("metabolism/processed/CBP_lvl.csv")
nhc <- read_csv("metabolism/processed/NHC.csv") %>%
mutate(DateTime_EST = force_tz(DateTime_EST, tz = "EST"),
date = as.Date(DateTime_EST)) %>%
filter(date = as.Date("2017-06-27")) %>%
select(DO.obs, temp.water, level_m, depth, discharge)
#cbp <- read_csv("metabolism/processed/CBP_lvl.csv")
nhc <- read_csv("metabolism/processed/NHC.csv") %>%
mutate(DateTime_EST = force_tz(DateTime_EST, tz = "EST"),
date = as.Date(DateTime_EST)) %>%
filter(date == as.Date("2017-06-27")) %>%
select(DO.obs, temp.water, level_m, depth, discharge)
summary(nhc)
ar_k <- read_csv("data/estimated_k_values.csv") %>%
# d = depth (m), v = velocity (m/s), DO.sat = DO at saturation (mg/L), t = temp C
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data")
ar_k$K600 <- K600fromO2(22, ar_k$k_md/.23)
ar_k
ar_k <- ar_k %>%
filter(site =="NHC") %>%
mutate(depth = .23,
discharge = .14,
watertemp = 22,
K600 = K600fromO2(watertemp, k_md/depth))
ar_k
log(.14)
ar_k <- read_csv("data/estimated_k_values.csv") %>%
# d = depth (m), v = velocity (m/s), DO.sat = DO at saturation (mg/L), t = temp C
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data")
ar_k
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code")
ar_k <- read_csv("data/estimated_k_values.csv") %>%
# d = depth (m), v = velocity (m/s), DO.sat = DO at saturation (mg/L), t = temp C
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data")
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code")
ar_k <- read_csv("data/estimated_k_values.csv") %>%
# d = depth (m), v = velocity (m/s), DO.sat = DO at saturation (mg/L), t = temp C
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data")
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code")
ar_k <- read_csv("data/estimated_k_values.csv")
# d = depth (m), v = velocity (m/s), DO.sat = DO at saturation (mg/L), t = temp C
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data")
#cbp <- read_csv("metabolism/processed/CBP_lvl.csv")
# get measured k values and pair with discharge ####
nhc <- read_csv("metabolism/processed/NHC.csv") %>%
mutate(DateTime_EST = force_tz(DateTime_EST, tz = "EST"),
date = as.Date(DateTime_EST)) %>%
filter(date == as.Date("2017-06-27")) %>%
select(DO.obs, temp.water, level_m, depth, discharge)
ar_k
unhc <- read_csv("metabolism/processed/NHC.csv") %>%
mutate(DateTime_EST = force_tz(DateTime_EST, tz = "EST"),
date = as.Date(DateTime_EST)) %>%
filter(date == as.Date("2017-07-11")) %>%
select(DO.obs, temp.water, level_m, depth, discharge)
summary(unhc)
unhc
summary(unhc)
ar_k <- unhc_k %>%
filter(site =="UNHC") %>%
mutate(depth = .14,
discharge = .02,
watertemp = 25,
K600 = K600fromO2(watertemp, k_md/depth))
ar_k <- nhc_k %>%
filter(site =="NHC") %>%
mutate(depth = .23,
discharge = .14,
watertemp = 22,
K600 = K600fromO2(watertemp, k_md/depth))
ar_k
nhc_k <- ar_k %>%
filter(site =="NHC") %>%
mutate(depth = .23,
discharge = .14,
watertemp = 22,
K600 = K600fromO2(watertemp, k_md/depth))
unhc_k <- ar_k %>%
filter(site =="UNHC") %>%
mutate(depth = .14,
discharge = .02,
watertemp = 25,
K600 = K600fromO2(watertemp, k_md/depth))
ar_k <- bind_rows(nhc_k, unhc_k)
ar_k
write_csv(ar_k, "gas_data/measured_k_Ar_releases.csv")
library(tidyverse)
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code/")
t26 <- read_csv("../data/hall/hall_table_26.csv")
t13 <- read_csv("../data/hall/hall_table_13_p.csv")
t14 <- read_csv("../data/hall/hall_table_14_nitrogen.csv")
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data")
datMar <- read.csv("NHCLongitudinalDO_20190308.csv", header=TRUE, stringsAsFactors = FALSE)
datOct <- read.csv("NHCLongitudinalDO_20191009.csv", header=TRUE, stringsAsFactors = FALSE)
w <- c(which(datMar$trib==1), which(datMar$Notes=="morning"))
datMar <- datMar[-w,]
plot(-datMar$distance_m, datMar$DO_mgL, type = "l",lty=2, ylim = c(0,16), ylab = "DO_mgL")
lines(-datOct$ï..distance_m,datOct$DO_mgL)
setwd("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/hall_50yl/code/")
dat_mar <- read_csv("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data/NHCLongitudinalDO_20190308.csv")
dat_oct <- read_csv("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data/NHCLongitudinalDO_20191009.csv")
t26
t13
t13 <- read_csv("../data/hall/hall_table_13_p.csv")
t13 <- read_csv("../data/hall/hall_table_13_p.csv") %>%
mutate(site = "Concrete")
t26
t26 <- read_csv("../data/hall/hall_table_26.csv") %>%
rename(site = location)
t26
t13 <- read_csv("../data/hall/hall_table_13_p.csv") %>%
mutate(site = "Concrete",
date = as.Date(date))
t13 <- read_csv("../data/hall/hall_table_13_p.csv") %>%
mutate(site = "Concrete",
date = as.Date(date))
t13
t13 <- read_csv("../data/hall/hall_table_13_p.csv")
t14 <- read_csv("../data/hall/hall_table_14_nitrogen.csv")
t26 <- read_csv("../data/hall/hall_table_26.csv") %>%
rename(site = location)
t26
t26 <- read_csv("../data/hall/hall_table_26.csv") %>%
rename(location= site)
t26 <- read_csv("../data/hall/hall_table_26.csv") %>%
dplyr::rename(site = location)
t13 <- read_csv("../data/hall/hall_table_13_p.csv")
t14 <- read_csv("../data/hall/hall_table_14_nitrogen.csv")
hall <- full_join(t26, t13, by = c("date", "site"))
hall
hall <- full_join(t26, t13, by = c("date", "site", "TP_mgl")) %>%
full_join(t14, by = c("date", "site"))
hall
now <- bind_rows(dat_mar, dat_oct)
now
dat_mar
dat_mar <- read_csv("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data/NHCLongitudinalDO_20190308.csv")
dat_oct <- read_csv("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data/NHCLongitudinalDO_20191009.csv")
dat_mar <- read_csv("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data/NHCLongitudinalDO_20190308.csv")
dat_mar
now <- bind_rows(dat_mar, dat_oct)
dat_mar <- read_csv("C:/Users/Alice Carter/Dropbox (Duke Bio_Ea)/projects/NHC_2019_metabolism/data/longitudinal_sampling/longitudinal_sensor_data/NHCLongitudinalDO_20190308.csv") %>%
mutate(depth_cm = as.numeric(depth_cm))
now <- bind_rows(dat_mar, dat_oct)
now
now <- bind_rows(dat_mar, dat_oct) %>%
select(date, distance_m, depth_cm, temp_C, DO_mgL, SpC_uscm,
NO3.N_mgl, NPOC_mgl, TN_mgl, NH4.N_mgl, PO4.P_mgl)
now
summary(hall)
summary(now)
unique(hall$no2_mgl)
t14 <- read_csv("../data/hall/hall_table_14_nitrogen.csv") %>%
mutate(no2_mgl = ifelse(no2_mgl == "nd", 0, as.numeric(no2_mgl)),
no3_mgl = ifelse(no3_mgl =="nd", 0, as.numeric(no3_mgl)))
unique(hall$no3_mgl)
hall
t14
hall <- full_join(t26, t13, by = c("date", "site", "TP_mgl")) %>%
full_join(t14, by = c("date", "site"))
summary(hall)
summary(now)
